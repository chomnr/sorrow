/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 robot_w_chains.glb --transform -t 
Files: robot_w_chains.glb [4MB] > C:\Users\zeljk\OneDrive\Desktop\robot\robot_w_chains\robot_w_chains-transformed.glb [191.64KB] (95%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'Robot_Ani1' | 'Robot_Ani2' | 'Robot_Ani3'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Chain_Right: THREE.Mesh
    Robot: THREE.SkinnedMesh
    Hip: THREE.Bone
    IkTarget_L: THREE.Bone
    ik_L: THREE.Bone
    IkTarget_R: THREE.Bone
    ik_R: THREE.Bone
  }
  materials: {
    ['Robot-Chains_Mat']: THREE.MeshStandardMaterial
    ['Robot-Chains_Mat']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Robot(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/robot_w_chains-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

  // GreyScale
  React.useEffect(() => {
    Object.values(materials).forEach((material) => {
      material.color.set(0x111)
      material.emissive.set(0x000000)
      material.metalness = 0
      material.roughness = 1
    })
  }, [materials])

  // Animation
  React.useEffect(() => {
    const action = actions?.['Robot_Ani3']
    if (action) {
      action.play()
    }

    return () => {
      if (action) {
        action.stop()
      }
    }
  }, [actions])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="RobotArmature">
          <primitive object={nodes.Hip} />
          <primitive object={nodes.IkTarget_L} />
          <primitive object={nodes.ik_L} />
          <primitive object={nodes.IkTarget_R} />
          <primitive object={nodes.ik_R} />
        </group>
        <mesh name="Chain_Right" geometry={nodes.Chain_Right.geometry} material={materials['Robot-Chains_Mat']} />
        <skinnedMesh name="Robot" geometry={nodes.Robot.geometry} material={materials['Robot-Chains_Mat']} skeleton={nodes.Robot.skeleton} />
      </group>
    </group>
  )
}

useGLTF.preload('/robot_w_chains-transformed.glb')


